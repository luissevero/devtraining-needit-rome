<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_58872_needit_needit</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>NeedIt When needed field date</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	/*
	var rightNow = new GlideDateTime();
	
	// Criar um objeto GlideDateTime com a informação do campo When needed
	var whenNeeded = new GlideDateTime(current.u_when_needed);
	
	
	//Não permitir que o registro seja salvo no DB caso o campo when needed seja anterior a variável rightNow
	if(whenNeeded.before(rightNow)){
		gs.addErrorMessage("When needed date cannot be in the past. Your request has not been saved to the database.");
		current.setAbortAction(true);
	}
	*/
	
	/****** Esta parte do código irá substituir o que está comentado acima, para utilizar o método da Classe Utils ******/
	//Instanciar a classe NeedItUtils, chamar o método isDatePast passando como parâmetro When needed
	var niUtils = new NeedItUtils();
	var isPast = niUtils.isDatePast(current.u_when_needed);
	
	//Fazer a verificação se a data é anterior a agora
	if(isPast == true){
		gs.addErrorMessage("When needed date cannot be in the past. Your request has not been saved to the database.");
		current.setAbortAction(true);
		return;
	}
	
	/*
	//Não permitir que o campo when needed seja a data de hoje
	if(whenNeeded.getLocalDate() == rightNow.getLocalDate()){
		gs.addErrorMessage("When needed não pode ser hoje!");
		current.setAbortAction(true);
	}
	*/
	var isToday = niUtils.isDateToday(current.u_when_needed);
	if(isToday == true){
		gs.addErrorMessage("A data informada não pode ser hoje!");
		current.setAbortAction(true);
		return;
	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-12-27 14:12:44</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>74e6d1fb8720011071d163d73cbb351c</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>NeedIt When needed field date</sys_name>
        <sys_overrides/>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_script_74e6d1fb8720011071d163d73cbb351c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-12-28 12:35:56</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=74e6d1fb8720011071d163d73cbb351c"/>
</record_update>
